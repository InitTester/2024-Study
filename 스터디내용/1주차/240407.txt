private, public만 씀
메서드 네임은 동사

* 선언부에서 중요한 것 주관적
1. 네이밍
ㄴ 메서드 동사
ㄴ 변수 명사

파라미터 = 변수

메서드 분리

아규먼트

주소 참조 : 체크카드로 사와라, 돈을 준 것이 아님
값 참조 : 

클래스 안에는
메서드와 변수

클래스 파일로 존재, 메모리에 올라가진 않는다
인스턴스화: new로 메모리에 적재
인스턴스가 만들어져야 객체

스태틱 영역 : public static 붙은 것
스택: 전위, 중위, 후위 연산 => 메서드의 놀이터
힙: 인스턴스화 됐을 때, 싱글톤 패턴 <- 메모리 낭비 방지

상속: 관계의 문제
ㄴ is-a (상속), has-a (포함)

extends 확장 (사람 is a 동물)
사람은 도구이다? 사람은 도구를 갖고 있다.

abstract class 동물 {
  먹고() => 추상화: 사람이나 고양이가 먹는 것이 다름, 행위만 맞춥시다
  자고()
  abstract 싸고()
}

class 사람 extends 동물 {
   도구 tool; // has-a
   // 먹고(); // 생략 가능
   @Override // 선언부가 같아야 함
   먹고() { // 생략 가능하지만 별도 구현
      tool.구워();
   }

   먹고() {
	tool.구워()
        super.먹고()
   } 

   먹고(반찬 5첩) {
	tool.구워()
        super.먹고()
   } 

   
   먹고(반찬 7첩, 후식 파인애플) {
	tool.구워()
        super.먹고()
   } 
}


정보의 위변조를 방지하기 위해서 직접 접근을 막아야 합니다.

제어자 private 지갑 wallet; // 캡슐화는 변수 기준으로 하는 것
setter, getter와 함께 => 추적 가능

interface 작업 지시서

interface 퇴근() { // 행위만 명시
  
  집에 가(); // 구현부가 없어야 함 -> 네가 알아서 하세요, 결과만 알아서 반환하세여
}

implements
@Override 사용 - 선언부가 같기 때문에


interface 행위의 종속 <-> 상속 implements 관계의 종속


interface 짖어 {
  짖어();
}

interface 움직여 {

}

1. 무조건 구현해야 함

class 고양이 implements 짖어 {
   @Override
   짖어() {}
}

class 개 implements 짖어 {
   @Override
   짖어() {}
}

다형성 is-a 베이스로
class 임시 {
  사람 human = new 동물(); // 동물은 사람이다
  동물 animal = new 사람(); // 사람은 동물이다
}

animal.(동물의 메서드만)

// 관계를 코드로 표현
Object obj = new 사람(); 
사람 instanceof obj => 더 많이 씀 (업무적으로는 많이 안 쓰임)

web -> Collection, 자료구조

포트폴리오
swagger를 통해 테스트하라고 보여줌, 에러 기록, 홈페이지에서 구현한 것을 보여줘

면접: 자기소개서 (개인적으로 질문하는 것) -> 질문할 거리를 적어 놔야함 
뭘 공부하고 뭐에 관심있고 => 뭐가 어려웠고 어떻게 해결했는지
전부 개발과 엮어서 적으세요

---

가위바위보 구현

입력
구현
출력

자바 야구게임
Strike Ball Out

사용자에게 숫자를 입력 받음
PC도 숫자

ㄴ 같으면 S
ㄴ 다르면 B
같은 숫자가 3번 나오게 되면 O

tomcat.apache.org -> 9.0.x
maven.apache.org -> 최신 버전

1-10 최소 4개 코드로 표현
5번은 표현 X




